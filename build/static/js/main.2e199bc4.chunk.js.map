{"version":3,"sources":["header.js","item.js","main.js","footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","listChangeHandler","e","value","target","keyCode","todoItem","item","isDone","_this","props","addTodoItem","react_default","a","createElement","type","placeholder","onKeyDown","this","React","Component","Item","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","createRef","changeHandler","bind","assertThisInitialized","clickHandler","changeTodoItem","index","isAllCheckedJudge","deleteUselessItem","isDoneStyle","className","name","onChange","checked","href","onClick","Main","selectAll","changeAllCheckedStation","todoLists","todoList","map","src_item","key","id","isAllChecked","htmlFor","Footer","clearAllItem","console","log","filter","length","App","setState","concat","toConsumableArray","state","newTodoList","splice","newTodoList2","isChecked","every","header","main","footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2e199bc4.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass Header extends React.Component{\n    listChangeHandler = (e) => {\n        let value = e.target.value\n        if(e.keyCode ===13){\n            let todoItem = {\n                item:value,\n                isDone:false\n            }\n            e.target.value = \"\"\n            this.props.addTodoItem(todoItem)\n        }\n    }\n    render(){\n        return (\n            <header>\n            <h1>Todos</h1>\n            <input type=\"text\" placeholder=\"What needs to be done?\" onKeyDown={this.listChangeHandler} />\n           </header>\n        )\n    }\n}\nexport default Header","import React from 'react';\nimport './App.css';\n\nclass Item extends React.Component{\n  constructor(props){\n    super(props)\n    this.todoItem = React.createRef()\n    this.changeHandler = this.changeHandler.bind(this)\n    this.clickHandler = this.clickHandler.bind(this)\n  }\n  changeHandler(e){\n      let isDone = !this.props.isDone\n      this.props.changeTodoItem(this.props.index,isDone)\n      this.props.isAllCheckedJudge()\n  }\n  \n  //delete clicked item\n  clickHandler(e){\n     // this.props.deleteUselessItem(this.todoItem)\n     this.props.deleteUselessItem(this.props.index)\n  }\n  render(){\n    let isDoneStyle = this.props.isDone?\"done\":\"\"\n    return(\n      <li index={this.props.index} className={isDoneStyle}>\n        <div className=\"view\">\n          <input type=\"checkbox\" name=\"toggle\" onChange={this.changeHandler} checked={this.props.isDone}/>\n          <label>{this.props.item}</label>\n        </div>\n        <a href=\"#\" className=\"destroy\" onClick={this.clickHandler}>x</a>\n      </li>\n    )\n  }\n}\n\nexport default Item","import React from 'react';\nimport './App.css';\nimport Item from './item.js'\n\nclass Main extends React.Component{\n    changeHandler = (e) => {\n        this.props.selectAll(e.target.checked)\n        this.props.changeAllCheckedStation(e.target.checked)\n    }\n    render(){\n        const todoLists = this.props.todoList.map(function(item,index){\n           return <Item key={index} item={item.item} isDone={item.isDone} index={index} changeTodoItem={this.props.changeTodoItem} deleteUselessItem={this.props.deleteUselessItem} isAllCheckedJudge={this.props.isAllCheckedJudge}/>\n        },this)\n        return (\n            <section>\n                <input type=\"checkbox\" id=\"toggle\" checked={this.props.isAllChecked} onChange={this.changeHandler}/>\n                <label htmlFor=\"toggle\" className=\"selectAll\">Mark all as complete</label>\n                 <ul id=\"todoList\">\n                    {todoLists}\n                 </ul>\n             </section>\n        )\n    }\n}\nexport default Main","import React from 'react';\nimport './App.css';\n\nclass Footer extends React.Component{\n    clickHandler = () => {\n        this.props.clearAllItem()\n        console.log(\"hhh\")\n    }\n    \n    render(){\n        return (\n            <footer>\n                <a href=\"#\" id=\"clear-completed\"  onClick={this.clickHandler}>clear {this.props.todoList.filter(function(item,index){return item.isDone}).length} completed item</a>\n                <div className=\"todo-count\">\n                    <b>{this.props.todoList.filter(function(item,index){return !item.isDone}).length}</b> items left\n                </div>\n            </footer>\n        )\n    }\n}\n\nexport default Footer","import React from 'react';\nimport './App.css';\nimport Header from './header.js'\nimport Main from './main.js'\nimport Footer from './footer.js'\n\nclass App extends React.Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      todoList : [],\n      isAllChecked:false\n    }\n  }\n  //add item\n  addTodoItem = (item) => {\n    this.setState({todoList:[...this.state.todoList,item]})\n  }\n  //change item state\n  changeTodoItem = (index,state) => {\n    let newTodoList = this.state.todoList\n    newTodoList[index].isDone = state\n    this.setState({todoList:newTodoList})\n  }\n  //delete useless item\n  deleteUselessItem = (index) => {\n    let newTodoList = this.state.todoList\n    newTodoList.splice(index,1)\n    this.setState({todoList:newTodoList})\n  }\n  //select all item\n  selectAll = (isDone) => {\n   let newTodoList = this.state.todoList\n   let newTodoList2 = newTodoList.map(function(item,index){\n     return {item:item.item,isDone:isDone}\n   },this)\n   this.setState({todoList:newTodoList2})\n  }\n  //change allSelected state\n  changeAllCheckedStation = (isChecked) => {\n    this.setState({isAllChecked:isChecked})\n  }\n  //all is done?\n  isAllCheckedJudge = ()=>{\n    if(this.state.todoList.every(function(item,index){return (item.isDone)})){\n      this.setState({isAllChecked:true})\n    }\n    else this.setState({isAllChecked:false})\n  }\n  //clear all item\n  clearAllItem = () => {\n    //\n    let newTodoList = this.state.todoList\n    let newTodoList2 = newTodoList.filter(function(item,index){return !item.isDone})\n    this.setState({todoList:newTodoList2,isAllChecked:false})\n  }\n  render(){\n    return (\n      <div className=\"container\">\n        <Header addTodoItem={this.addTodoItem}/>\n        <Main todoList={this.state.todoList} changeTodoItem={this.changeTodoItem} deleteUselessItem={this.deleteUselessItem} selectAll={this.selectAll} isAllChecked={this.state.isAllChecked} isAllCheckedJudge={this.isAllCheckedJudge} changeAllCheckedStation={this.changeAllCheckedStation}/>\n        <Footer clearAllItem={this.clearAllItem} todoList={this.state.todoList}/>\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}